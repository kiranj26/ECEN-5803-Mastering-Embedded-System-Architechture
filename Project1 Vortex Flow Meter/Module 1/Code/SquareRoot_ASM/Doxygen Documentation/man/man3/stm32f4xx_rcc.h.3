.TH "drivers/stm32f4xx_rcc.h" 3 "Version 0.1.-" "Square Root Approximation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
drivers/stm32f4xx_rcc.h \- This file contains all the functions prototypes for the RCC firmware library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBRCC_ClocksTypeDef\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRCC_HSE_OFF\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBRCC_HSE_ON\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBRCC_HSE_Bypass\fP   ((uint8_t)0x05)"
.br
.ti -1c
.RI "#define \fBIS_RCC_HSE\fP(HSE)"
.br
.ti -1c
.RI "#define \fBRCC_PLLSource_HSI\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_PLLSource_HSE\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLL_SOURCE\fP(SOURCE)"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLM_VALUE\fP(VALUE)   ((VALUE) <= 63)"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLN_VALUE\fP(VALUE)   ((192 <= (VALUE)) && ((VALUE) <= 432))"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLP_VALUE\fP(VALUE)   (((VALUE) == 2) || ((VALUE) == 4) || ((VALUE) == 6) || ((VALUE) == 8))"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLQ_VALUE\fP(VALUE)   ((4 <= (VALUE)) && ((VALUE) <= 15))"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLI2SN_VALUE\fP(VALUE)   ((192 <= (VALUE)) && ((VALUE) <= 432))"
.br
.ti -1c
.RI "#define \fBIS_RCC_PLLI2SR_VALUE\fP(VALUE)   ((2 <= (VALUE)) && ((VALUE) <= 7))"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLKSource_HSI\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLKSource_HSE\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLKSource_PLLCLK\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBIS_RCC_SYSCLK_SOURCE\fP(SOURCE)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div1\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div2\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div4\fP   ((uint32_t)0x00000090)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div8\fP   ((uint32_t)0x000000A0)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div16\fP   ((uint32_t)0x000000B0)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div64\fP   ((uint32_t)0x000000C0)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div128\fP   ((uint32_t)0x000000D0)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div256\fP   ((uint32_t)0x000000E0)"
.br
.ti -1c
.RI "#define \fBRCC_SYSCLK_Div512\fP   ((uint32_t)0x000000F0)"
.br
.ti -1c
.RI "#define \fBIS_RCC_HCLK\fP(HCLK)"
.br
.ti -1c
.RI "#define \fBRCC_HCLK_Div1\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_HCLK_Div2\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBRCC_HCLK_Div4\fP   ((uint32_t)0x00001400)"
.br
.ti -1c
.RI "#define \fBRCC_HCLK_Div8\fP   ((uint32_t)0x00001800)"
.br
.ti -1c
.RI "#define \fBRCC_HCLK_Div16\fP   ((uint32_t)0x00001C00)"
.br
.ti -1c
.RI "#define \fBIS_RCC_PCLK\fP(PCLK)"
.br
.ti -1c
.RI "#define \fBRCC_IT_LSIRDY\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBRCC_IT_LSERDY\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBRCC_IT_HSIRDY\fP   ((uint8_t)0x04)"
.br
.ti -1c
.RI "#define \fBRCC_IT_HSERDY\fP   ((uint8_t)0x08)"
.br
.ti -1c
.RI "#define \fBRCC_IT_PLLRDY\fP   ((uint8_t)0x10)"
.br
.ti -1c
.RI "#define \fBRCC_IT_PLLI2SRDY\fP   ((uint8_t)0x20)"
.br
.ti -1c
.RI "#define \fBRCC_IT_CSS\fP   ((uint8_t)0x80)"
.br
.ti -1c
.RI "#define \fBIS_RCC_IT\fP(IT)   ((((IT) & (uint8_t)0xC0) == 0x00) && ((IT) != 0x00))"
.br
.ti -1c
.RI "#define \fBIS_RCC_GET_IT\fP(IT)"
.br
.ti -1c
.RI "#define \fBIS_RCC_CLEAR_IT\fP(IT)   ((((IT) & (uint8_t)0x40) == 0x00) && ((IT) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_LSE_OFF\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBRCC_LSE_ON\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBRCC_LSE_Bypass\fP   ((uint8_t)0x04)"
.br
.ti -1c
.RI "#define \fBIS_RCC_LSE\fP(LSE)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_LSE\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_LSI\fP   ((uint32_t)0x00000200)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div2\fP   ((uint32_t)0x00020300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div3\fP   ((uint32_t)0x00030300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div4\fP   ((uint32_t)0x00040300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div5\fP   ((uint32_t)0x00050300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div6\fP   ((uint32_t)0x00060300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div7\fP   ((uint32_t)0x00070300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div8\fP   ((uint32_t)0x00080300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div9\fP   ((uint32_t)0x00090300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div10\fP   ((uint32_t)0x000A0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div11\fP   ((uint32_t)0x000B0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div12\fP   ((uint32_t)0x000C0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div13\fP   ((uint32_t)0x000D0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div14\fP   ((uint32_t)0x000E0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div15\fP   ((uint32_t)0x000F0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div16\fP   ((uint32_t)0x00100300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div17\fP   ((uint32_t)0x00110300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div18\fP   ((uint32_t)0x00120300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div19\fP   ((uint32_t)0x00130300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div20\fP   ((uint32_t)0x00140300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div21\fP   ((uint32_t)0x00150300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div22\fP   ((uint32_t)0x00160300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div23\fP   ((uint32_t)0x00170300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div24\fP   ((uint32_t)0x00180300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div25\fP   ((uint32_t)0x00190300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div26\fP   ((uint32_t)0x001A0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div27\fP   ((uint32_t)0x001B0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div28\fP   ((uint32_t)0x001C0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div29\fP   ((uint32_t)0x001D0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div30\fP   ((uint32_t)0x001E0300)"
.br
.ti -1c
.RI "#define \fBRCC_RTCCLKSource_HSE_Div31\fP   ((uint32_t)0x001F0300)"
.br
.ti -1c
.RI "#define \fBIS_RCC_RTCCLK_SOURCE\fP(SOURCE)"
.br
.ti -1c
.RI "#define \fBRCC_I2S2CLKSource_PLLI2S\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBRCC_I2S2CLKSource_Ext\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBIS_RCC_I2SCLK_SOURCE\fP(SOURCE)   (((SOURCE) == \fBRCC_I2S2CLKSource_PLLI2S\fP) || ((SOURCE) == \fBRCC_I2S2CLKSource_Ext\fP))"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOA\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOB\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOC\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOD\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOE\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOF\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOG\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOH\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_GPIOI\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_CRC\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_FLITF\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_SRAM1\fP   ((uint32_t)0x00010000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_SRAM2\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_BKPSRAM\fP   ((uint32_t)0x00040000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_CCMDATARAMEN\fP   ((uint32_t)0x00100000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_DMA1\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_DMA2\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_ETH_MAC\fP   ((uint32_t)0x02000000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_ETH_MAC_Tx\fP   ((uint32_t)0x04000000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_ETH_MAC_Rx\fP   ((uint32_t)0x08000000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_ETH_MAC_PTP\fP   ((uint32_t)0x10000000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_OTG_HS\fP   ((uint32_t)0x20000000)"
.br
.ti -1c
.RI "#define \fBRCC_AHB1Periph_OTG_HS_ULPI\fP   ((uint32_t)0x40000000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_AHB1_CLOCK_PERIPH\fP(PERIPH)   ((((PERIPH) & 0x818BEE00) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBIS_RCC_AHB1_RESET_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xDD9FEE00) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBIS_RCC_AHB1_LPMODE_PERIPH\fP(PERIPH)   ((((PERIPH) & 0x81986E00) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_AHB2Periph_DCMI\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBRCC_AHB2Periph_CRYP\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBRCC_AHB2Periph_HASH\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBRCC_AHB2Periph_RNG\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBRCC_AHB2Periph_OTG_FS\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBIS_RCC_AHB2_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xFFFFFF0E) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_AHB3Periph_FSMC\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBIS_RCC_AHB3_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xFFFFFFFE) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM2\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM3\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM4\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM5\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM6\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM7\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM12\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM13\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_TIM14\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_WWDG\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_SPI2\fP   ((uint32_t)0x00004000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_SPI3\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_USART2\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_USART3\fP   ((uint32_t)0x00040000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_UART4\fP   ((uint32_t)0x00080000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_UART5\fP   ((uint32_t)0x00100000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_I2C1\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_I2C2\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_I2C3\fP   ((uint32_t)0x00800000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_CAN1\fP   ((uint32_t)0x02000000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_CAN2\fP   ((uint32_t)0x04000000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_PWR\fP   ((uint32_t)0x10000000)"
.br
.ti -1c
.RI "#define \fBRCC_APB1Periph_DAC\fP   ((uint32_t)0x20000000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_APB1_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xC9013600) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_TIM1\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_TIM8\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_USART1\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_USART6\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_ADC\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_ADC1\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_ADC2\fP   ((uint32_t)0x00000200)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_ADC3\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_SDIO\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_SPI1\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_SYSCFG\fP   ((uint32_t)0x00004000)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_TIM9\fP   ((uint32_t)0x00010000)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_TIM10\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBRCC_APB2Periph_TIM11\fP   ((uint32_t)0x00040000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_APB2_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xFFF8A0CC) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBIS_RCC_APB2_RESET_PERIPH\fP(PERIPH)   ((((PERIPH) & 0xFFF8A6CC) == 0x00) && ((PERIPH) != 0x00))"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Source_HSI\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Source_LSE\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Source_HSE\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Source_PLLCLK\fP   ((uint32_t)0x00600000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Div_1\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Div_2\fP   ((uint32_t)0x04000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Div_3\fP   ((uint32_t)0x05000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Div_4\fP   ((uint32_t)0x06000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO1Div_5\fP   ((uint32_t)0x07000000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_MCO1SOURCE\fP(SOURCE)"
.br
.ti -1c
.RI "#define \fBIS_RCC_MCO1DIV\fP(DIV)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Source_SYSCLK\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Source_PLLI2SCLK\fP   ((uint32_t)0x40000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Source_HSE\fP   ((uint32_t)0x80000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Source_PLLCLK\fP   ((uint32_t)0xC0000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Div_1\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Div_2\fP   ((uint32_t)0x20000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Div_3\fP   ((uint32_t)0x28000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Div_4\fP   ((uint32_t)0x30000000)"
.br
.ti -1c
.RI "#define \fBRCC_MCO2Div_5\fP   ((uint32_t)0x38000000)"
.br
.ti -1c
.RI "#define \fBIS_RCC_MCO2SOURCE\fP(SOURCE)"
.br
.ti -1c
.RI "#define \fBIS_RCC_MCO2DIV\fP(DIV)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_HSIRDY\fP   ((uint8_t)0x21)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_HSERDY\fP   ((uint8_t)0x31)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_PLLRDY\fP   ((uint8_t)0x39)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_PLLI2SRDY\fP   ((uint8_t)0x3B)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_LSERDY\fP   ((uint8_t)0x41)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_LSIRDY\fP   ((uint8_t)0x61)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_BORRST\fP   ((uint8_t)0x79)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_PINRST\fP   ((uint8_t)0x7A)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_PORRST\fP   ((uint8_t)0x7B)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_SFTRST\fP   ((uint8_t)0x7C)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_IWDGRST\fP   ((uint8_t)0x7D)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_WWDGRST\fP   ((uint8_t)0x7E)"
.br
.ti -1c
.RI "#define \fBRCC_FLAG_LPWRRST\fP   ((uint8_t)0x7F)"
.br
.ti -1c
.RI "#define \fBIS_RCC_FLAG\fP(FLAG)"
.br
.ti -1c
.RI "#define \fBIS_RCC_CALIBRATION_VALUE\fP(VALUE)   ((VALUE) <= 0x1F)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBRCC_DeInit\fP (void)"
.br
.RI "Resets the RCC clock configuration to the default reset state\&. "
.ti -1c
.RI "void \fBRCC_HSEConfig\fP (uint8_t RCC_HSE)"
.br
.RI "Configures the External High Speed oscillator (HSE)\&. "
.ti -1c
.RI "ErrorStatus \fBRCC_WaitForHSEStartUp\fP (void)"
.br
.RI "Waits for HSE start-up\&. "
.ti -1c
.RI "void \fBRCC_AdjustHSICalibrationValue\fP (uint8_t HSICalibrationValue)"
.br
.RI "Adjusts the Internal High Speed oscillator (HSI) calibration value\&. "
.ti -1c
.RI "void \fBRCC_HSICmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the Internal High Speed oscillator (HSI)\&. "
.ti -1c
.RI "void \fBRCC_LSEConfig\fP (uint8_t RCC_LSE)"
.br
.RI "Configures the External Low Speed oscillator (LSE)\&. "
.ti -1c
.RI "void \fBRCC_LSICmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the Internal Low Speed oscillator (LSI)\&. "
.ti -1c
.RI "void \fBRCC_PLLConfig\fP (uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)"
.br
.RI "Configures the main PLL clock source, multiplication and division factors\&. "
.ti -1c
.RI "void \fBRCC_PLLCmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the main PLL\&. "
.ti -1c
.RI "void \fBRCC_PLLI2SConfig\fP (uint32_t PLLI2SN, uint32_t PLLI2SR)"
.br
.RI "Configures the PLLI2S clock multiplication and division factors\&. "
.ti -1c
.RI "void \fBRCC_PLLI2SCmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the PLLI2S\&. "
.ti -1c
.RI "void \fBRCC_ClockSecuritySystemCmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the Clock Security System\&. "
.ti -1c
.RI "void \fBRCC_MCO1Config\fP (uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)"
.br
.RI "Selects the clock source to output on MCO1 pin(PA8)\&. "
.ti -1c
.RI "void \fBRCC_MCO2Config\fP (uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)"
.br
.RI "Selects the clock source to output on MCO2 pin(PC9)\&. "
.ti -1c
.RI "void \fBRCC_SYSCLKConfig\fP (uint32_t RCC_SYSCLKSource)"
.br
.RI "Configures the system clock (SYSCLK)\&. "
.ti -1c
.RI "uint8_t \fBRCC_GetSYSCLKSource\fP (void)"
.br
.RI "Returns the clock source used as system clock\&. "
.ti -1c
.RI "void \fBRCC_HCLKConfig\fP (uint32_t RCC_SYSCLK)"
.br
.RI "Configures the AHB clock (HCLK)\&. "
.ti -1c
.RI "void \fBRCC_PCLK1Config\fP (uint32_t RCC_HCLK)"
.br
.RI "Configures the Low Speed APB clock (PCLK1)\&. "
.ti -1c
.RI "void \fBRCC_PCLK2Config\fP (uint32_t RCC_HCLK)"
.br
.RI "Configures the High Speed APB clock (PCLK2)\&. "
.ti -1c
.RI "void \fBRCC_GetClocksFreq\fP (\fBRCC_ClocksTypeDef\fP *RCC_Clocks)"
.br
.RI "Returns the frequencies of different on chip clocks; SYSCLK, HCLK, PCLK1 and PCLK2\&. 
.br
 "
.ti -1c
.RI "void \fBRCC_RTCCLKConfig\fP (uint32_t RCC_RTCCLKSource)"
.br
.RI "Configures the RTC clock (RTCCLK)\&. "
.ti -1c
.RI "void \fBRCC_RTCCLKCmd\fP (FunctionalState NewState)"
.br
.RI "Enables or disables the RTC clock\&. "
.ti -1c
.RI "void \fBRCC_BackupResetCmd\fP (FunctionalState NewState)"
.br
.RI "Forces or releases the Backup domain reset\&. "
.ti -1c
.RI "void \fBRCC_I2SCLKConfig\fP (uint32_t RCC_I2SCLKSource)"
.br
.RI "Configures the I2S clock source (I2SCLK)\&. "
.ti -1c
.RI "void \fBRCC_AHB1PeriphClockCmd\fP (uint32_t RCC_AHB1Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB1 peripheral clock\&. "
.ti -1c
.RI "void \fBRCC_AHB2PeriphClockCmd\fP (uint32_t RCC_AHB2Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB2 peripheral clock\&. "
.ti -1c
.RI "void \fBRCC_AHB3PeriphClockCmd\fP (uint32_t RCC_AHB3Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB3 peripheral clock\&. "
.ti -1c
.RI "void \fBRCC_APB1PeriphClockCmd\fP (uint32_t RCC_APB1Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the Low Speed APB (APB1) peripheral clock\&. "
.ti -1c
.RI "void \fBRCC_APB2PeriphClockCmd\fP (uint32_t RCC_APB2Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the High Speed APB (APB2) peripheral clock\&. "
.ti -1c
.RI "void \fBRCC_AHB1PeriphResetCmd\fP (uint32_t RCC_AHB1Periph, FunctionalState NewState)"
.br
.RI "Forces or releases AHB1 peripheral reset\&. "
.ti -1c
.RI "void \fBRCC_AHB2PeriphResetCmd\fP (uint32_t RCC_AHB2Periph, FunctionalState NewState)"
.br
.RI "Forces or releases AHB2 peripheral reset\&. "
.ti -1c
.RI "void \fBRCC_AHB3PeriphResetCmd\fP (uint32_t RCC_AHB3Periph, FunctionalState NewState)"
.br
.RI "Forces or releases AHB3 peripheral reset\&. "
.ti -1c
.RI "void \fBRCC_APB1PeriphResetCmd\fP (uint32_t RCC_APB1Periph, FunctionalState NewState)"
.br
.RI "Forces or releases Low Speed APB (APB1) peripheral reset\&. "
.ti -1c
.RI "void \fBRCC_APB2PeriphResetCmd\fP (uint32_t RCC_APB2Periph, FunctionalState NewState)"
.br
.RI "Forces or releases High Speed APB (APB2) peripheral reset\&. "
.ti -1c
.RI "void \fBRCC_AHB1PeriphClockLPModeCmd\fP (uint32_t RCC_AHB1Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode\&. "
.ti -1c
.RI "void \fBRCC_AHB2PeriphClockLPModeCmd\fP (uint32_t RCC_AHB2Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode\&. "
.ti -1c
.RI "void \fBRCC_AHB3PeriphClockLPModeCmd\fP (uint32_t RCC_AHB3Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode\&. "
.ti -1c
.RI "void \fBRCC_APB1PeriphClockLPModeCmd\fP (uint32_t RCC_APB1Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode\&. "
.ti -1c
.RI "void \fBRCC_APB2PeriphClockLPModeCmd\fP (uint32_t RCC_APB2Periph, FunctionalState NewState)"
.br
.RI "Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode\&. "
.ti -1c
.RI "void \fBRCC_ITConfig\fP (uint8_t RCC_IT, FunctionalState NewState)"
.br
.RI "Enables or disables the specified RCC interrupts\&. "
.ti -1c
.RI "FlagStatus \fBRCC_GetFlagStatus\fP (uint8_t RCC_FLAG)"
.br
.RI "Checks whether the specified RCC flag is set or not\&. "
.ti -1c
.RI "void \fBRCC_ClearFlag\fP (void)"
.br
.RI "Clears the RCC reset flags\&. The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST\&. "
.ti -1c
.RI "ITStatus \fBRCC_GetITStatus\fP (uint8_t RCC_IT)"
.br
.RI "Checks whether the specified RCC interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBRCC_ClearITPendingBit\fP (uint8_t RCC_IT)"
.br
.RI "Clears the RCC's interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains all the functions prototypes for the RCC firmware library\&. 


.PP
\fBAuthor\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBVersion\fP
.RS 4
V1\&.0\&.0 
.RE
.PP
\fBDate\fP
.RS 4
30-September-2011 
.RE
.PP
\fBAttention\fP
.RS 4
.RE
.PP
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME\&. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS\&.
.PP
.SS "(C) COPYRIGHT 2011 STMicroelectronics"

.SH "Author"
.PP 
Generated automatically by Doxygen for Square Root Approximation from the source code\&.
