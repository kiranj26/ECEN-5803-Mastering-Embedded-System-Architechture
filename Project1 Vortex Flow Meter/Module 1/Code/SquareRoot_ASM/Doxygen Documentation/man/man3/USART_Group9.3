.TH "USART_Group9" 3 "Version 0.1.-" "Square Root Approximation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
USART_Group9 \- Interrupts and flags management functions
.PP
 \- Interrupts and flags management functions\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBUSART_ITConfig\fP (USART_TypeDef *USARTx, uint16_t USART_IT, FunctionalState NewState)"
.br
.RI "Enables or disables the specified USART interrupts\&. "
.ti -1c
.RI "FlagStatus \fBUSART_GetFlagStatus\fP (USART_TypeDef *USARTx, uint16_t USART_FLAG)"
.br
.RI "Checks whether the specified USART flag is set or not\&. "
.ti -1c
.RI "void \fBUSART_ClearFlag\fP (USART_TypeDef *USARTx, uint16_t USART_FLAG)"
.br
.RI "Clears the USARTx's pending flags\&. "
.ti -1c
.RI "ITStatus \fBUSART_GetITStatus\fP (USART_TypeDef *USARTx, uint16_t USART_IT)"
.br
.RI "Checks whether the specified USART interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBUSART_ClearITPendingBit\fP (USART_TypeDef *USARTx, uint16_t USART_IT)"
.br
.RI "Clears the USARTx's interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interrupts and flags management functions\&. 


.PP
.nf
 ===============================================================================
                   Interrupts and flags management functions
 ===============================================================================  

  This subsection provides a set of functions allowing to configure the USART 
  Interrupts sources, DMA channels requests and check or clear the flags or 
  pending bits status\&.
  The user should identify which mode will be used in his application to manage 
  the communication: Polling mode, Interrupt mode or DMA mode\&. 
    
  Polling Mode
  =============
  In Polling Mode, the SPI communication can be managed by 10 flags:
     1\&. USART_FLAG_TXE : to indicate the status of the transmit buffer register
     2\&. USART_FLAG_RXNE : to indicate the status of the receive buffer register
     3\&. USART_FLAG_TC : to indicate the status of the transmit operation
     4\&. USART_FLAG_IDLE : to indicate the status of the Idle Line             
     5\&. USART_FLAG_CTS : to indicate the status of the nCTS input
     6\&. USART_FLAG_LBD : to indicate the status of the LIN break detection
     7\&. USART_FLAG_NE : to indicate if a noise error occur
     8\&. USART_FLAG_FE : to indicate if a frame error occur
     9\&. USART_FLAG_PE : to indicate if a parity error occur
     10\&. USART_FLAG_ORE : to indicate if an Overrun error occur

  In this Mode it is advised to use the following functions:
      - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
      - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);

  Interrupt Mode
  ===============
  In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
  and 10 pending bits: 

  Pending Bits:
  ------------- 
     1\&. USART_IT_TXE : to indicate the status of the transmit buffer register
     2\&. USART_IT_RXNE : to indicate the status of the receive buffer register
     3\&. USART_IT_TC : to indicate the status of the transmit operation
     4\&. USART_IT_IDLE : to indicate the status of the Idle Line             
     5\&. USART_IT_CTS : to indicate the status of the nCTS input
     6\&. USART_IT_LBD : to indicate the status of the LIN break detection
     7\&. USART_IT_NE : to indicate if a noise error occur
     8\&. USART_IT_FE : to indicate if a frame error occur
     9\&. USART_IT_PE : to indicate if a parity error occur
     10\&. USART_IT_ORE : to indicate if an Overrun error occur

  Interrupt Source:
  -----------------
     1\&. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
                       interrupt\&. 
     2\&. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
                        empty interrupt\&.
     3\&. USART_IT_TC : specifies the interrupt source for the Transmit complete 
                       interrupt\&. 
     4\&. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt\&.             
     5\&. USART_IT_CTS : specifies the interrupt source for the CTS interrupt\&. 
     6\&. USART_IT_LBD : specifies the interrupt source for the LIN break detection
                       interrupt\&. 
     7\&. USART_IT_PE : specifies the interrupt source for the parity error interrupt\&. 
     8\&. USART_IT_ERR :  specifies the interrupt source for the errors interrupt\&.

@note Some parameters are coded in order to use them as interrupt source or as pending bits\&.

  In this Mode it is advised to use the following functions:
     - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
     - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
     - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);

  DMA Mode
  ========
  In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
     1\&. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
     2\&. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request

  In this Mode it is advised to use the following function:
     - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "void USART_ClearFlag (USART_TypeDef * USARTx, uint16_t USART_FLAG)"

.PP
Clears the USARTx's pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fIUSARTx\fP where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral\&. 
.br
\fIUSART_FLAG\fP specifies the flag to clear\&. This parameter can be any combination of the following values: 
.PD 0
.IP "\(bu" 1
USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5)\&. 
.IP "\(bu" 1
USART_FLAG_LBD: LIN Break detection flag\&. 
.IP "\(bu" 1
USART_FLAG_TC: Transmission Complete flag\&. 
.IP "\(bu" 1
USART_FLAG_RXNE: Receive data register not empty flag\&.
.PP
.RE
.PP
\fBNote\fP
.RS 4
PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) flags are cleared by software sequence: a read operation to USART_SR register (\fBUSART_GetFlagStatus()\fP) followed by a read operation to USART_DR register (\fBUSART_ReceiveData()\fP)\&. 
.PP
RXNE flag can be also cleared by a read to the USART_DR register (\fBUSART_ReceiveData()\fP)\&. 
.PP
TC flag can be also cleared by software sequence: a read operation to USART_SR register (\fBUSART_GetFlagStatus()\fP) followed by a write operation to USART_DR register (\fBUSART_SendData()\fP)\&. 
.PP
TXE flag is cleared only by a write to the USART_DR register (\fBUSART_SendData()\fP)\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void USART_ClearITPendingBit (USART_TypeDef * USARTx, uint16_t USART_IT)"

.PP
Clears the USARTx's interrupt pending bits\&. 
.PP
\fBParameters\fP
.RS 4
\fIUSARTx\fP where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral\&. 
.br
\fIUSART_IT\fP specifies the interrupt pending bit to clear\&. This parameter can be one of the following values: 
.PD 0
.IP "\(bu" 1
USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) 
.IP "\(bu" 1
USART_IT_LBD: LIN Break detection interrupt 
.IP "\(bu" 1
USART_IT_TC: Transmission complete interrupt\&. 
.IP "\(bu" 1
USART_IT_RXNE: Receive Data register not empty interrupt\&.
.PP
.RE
.PP
\fBNote\fP
.RS 4
PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) pending bits are cleared by software sequence: a read operation to USART_SR register (\fBUSART_GetITStatus()\fP) followed by a read operation to USART_DR register (\fBUSART_ReceiveData()\fP)\&. 
.PP
RXNE pending bit can be also cleared by a read to the USART_DR register (\fBUSART_ReceiveData()\fP)\&. 
.PP
TC pending bit can be also cleared by software sequence: a read operation to USART_SR register (\fBUSART_GetITStatus()\fP) followed by a write operation to USART_DR register (\fBUSART_SendData()\fP)\&. 
.PP
TXE pending bit is cleared only by a write to the USART_DR register (\fBUSART_SendData()\fP)\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "FlagStatus USART_GetFlagStatus (USART_TypeDef * USARTx, uint16_t USART_FLAG)"

.PP
Checks whether the specified USART flag is set or not\&. 
.PP
\fBParameters\fP
.RS 4
\fIUSARTx\fP where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral\&. 
.br
\fIUSART_FLAG\fP specifies the flag to check\&. This parameter can be one of the following values: 
.PD 0
.IP "\(bu" 1
USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5) 
.IP "\(bu" 1
USART_FLAG_LBD: LIN Break detection flag 
.IP "\(bu" 1
USART_FLAG_TXE: Transmit data register empty flag 
.IP "\(bu" 1
USART_FLAG_TC: Transmission Complete flag 
.IP "\(bu" 1
USART_FLAG_RXNE: Receive data register not empty flag 
.IP "\(bu" 1
USART_FLAG_IDLE: Idle Line detection flag 
.IP "\(bu" 1
USART_FLAG_ORE: OverRun Error flag 
.IP "\(bu" 1
USART_FLAG_NE: Noise Error flag 
.IP "\(bu" 1
USART_FLAG_FE: Framing Error flag 
.IP "\(bu" 1
USART_FLAG_PE: Parity Error flag 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP new state of USART_FLAG (SET or RESET)\&. 
.RE
.PP

.SS "ITStatus USART_GetITStatus (USART_TypeDef * USARTx, uint16_t USART_IT)"

.PP
Checks whether the specified USART interrupt has occurred or not\&. 
.PP
\fBParameters\fP
.RS 4
\fIUSARTx\fP where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral\&. 
.br
\fIUSART_IT\fP specifies the USART interrupt source to check\&. This parameter can be one of the following values: 
.PD 0
.IP "\(bu" 1
USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) 
.IP "\(bu" 1
USART_IT_LBD: LIN Break detection interrupt 
.IP "\(bu" 1
USART_IT_TXE: Transmit Data Register empty interrupt 
.IP "\(bu" 1
USART_IT_TC: Transmission complete interrupt 
.IP "\(bu" 1
USART_IT_RXNE: Receive Data register not empty interrupt 
.IP "\(bu" 1
USART_IT_IDLE: Idle line detection interrupt 
.IP "\(bu" 1
USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set 
.IP "\(bu" 1
USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set 
.br
 
.IP "\(bu" 1
USART_IT_NE: Noise Error interrupt 
.IP "\(bu" 1
USART_IT_FE: Framing Error interrupt 
.IP "\(bu" 1
USART_IT_PE: Parity Error interrupt 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP new state of USART_IT (SET or RESET)\&. 
.RE
.PP

.SS "void USART_ITConfig (USART_TypeDef * USARTx, uint16_t USART_IT, FunctionalState NewState)"

.PP
Enables or disables the specified USART interrupts\&. 
.PP
\fBParameters\fP
.RS 4
\fIUSARTx\fP where x can be 1, 2, 3, 4, 5 or 6 to select the USART or UART peripheral\&. 
.br
\fIUSART_IT\fP specifies the USART interrupt sources to be enabled or disabled\&. This parameter can be one of the following values: 
.PD 0
.IP "\(bu" 1
USART_IT_CTS: CTS change interrupt 
.IP "\(bu" 1
USART_IT_LBD: LIN Break detection interrupt 
.IP "\(bu" 1
USART_IT_TXE: Transmit Data Register empty interrupt 
.IP "\(bu" 1
USART_IT_TC: Transmission complete interrupt 
.IP "\(bu" 1
USART_IT_RXNE: Receive Data register not empty interrupt 
.IP "\(bu" 1
USART_IT_IDLE: Idle line detection interrupt 
.IP "\(bu" 1
USART_IT_PE: Parity Error interrupt 
.IP "\(bu" 1
USART_IT_ERR: Error interrupt(Frame error, noise error, overrun error) 
.PP
.br
\fINewState\fP new state of the specified USARTx interrupts\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Square Root Approximation from the source code\&.
