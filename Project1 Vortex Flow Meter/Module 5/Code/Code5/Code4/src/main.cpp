/**----------------------------------------------------------------------------
 
   \file main.cpp

--                                                                           --
--              ECEN 5803 Mastering Embedded System Architecture             --
--                  Project 1 Module 4                                       --
--                Microcontroller Firmware                                   --
--                      main.cpp                                            --
--                                                                           --
-------------------------------------------------------------------------------
--
--  Designed for:  University of Colorado at Boulder
--               
--                
--  Designed by:  Tim Scherr
--  Revised by:  Student's name 
-- 
-- Version: 3.0
-- Date of current revision:  2022-06-20  
-- Target Microcontroller: ST STM32F401RE 
-- Tools used:  ARM mbed compiler
--              ARM mbed SDK
--              ST Nucleo STM32F401RE Board
--               
-- 
-- Functional Description:  Main code file generated by mbed, and then
--                           modified to implement a super loop bare metal OS.
--
--      Copyright (c) 2015, 2016, 2022 Tim Scherr  All rights reserved.
--
*/

#define MAIN
#include "shared.h"
#undef MAIN

#include "NHD_0216HZ.h"
#include "DS1631.h"
#include "pindef.h"

// Define green LED pin
DigitalOut greenLED(LED2);

// External ISR counter
extern volatile uint16_t SwTimerIsrCounter; 

// Timer interrupt instance
Ticker tick;          

 /****************      ECEN 5803 add code as indicated   ***************/
   // Add code to control LED LD2 here, 
   // including a function to flip the LED state on and off

void flip(void) {
    greenLED = !greenLED;  // Toggle the state of the green LED
}


// Set up serial communication over USB
Serial pc(USBTX, USBRX);

// Create timer instance
Timer custom_timer2;
 

/*----------------------------------------------------------------------------
 MAIN function
 *----------------------------------------------------------------------------*/

int main() 
{
	custom_timer2.start();
	pc.baud(9600);
/****************      ECEN 5803 add code as indicated   **********************/
               //  Add code to call timer0 function every 100 uS
	  tick.attach_us(&timer0, 100);
	
 // Print the initial banner
    pc.printf("\r\nHello World!\n\n\r");
    uint32_t  count = 0;   


// initialize serial buffer pointers
   rx_in_ptr =  rx_buf; /* pointer to the receive in data */
   rx_out_ptr = rx_buf; /* pointer to the receive out data*/
   tx_in_ptr =  tx_buf; /* pointer to the transmit in data*/
   tx_out_ptr = tx_buf; /* pointer to the transmit out */	
   

/****************      ECEN 5803 add code as indicated   **********************/
    // uncomment this section after adding monitor code.  
   /* send a starting message to the terminal  */                    
	 pc.printf("\n\r\n\r***** Project 1 Module 5 - Viraj_Kiran *****\n\r\n\r");
   UART_direct_msg_put("\r\nSystem Reset\r\nCode ver. ");
   UART_direct_msg_put( CODE_VERSION );
   UART_direct_msg_put("\r\n");
   UART_direct_msg_put( COPYRIGHT );
   UART_direct_msg_put("\r\n");

   set_display_mode();                                      
   
	 custom_timer2.stop();
	 //pc.printf("Time Taken For Main: %f seconds\n\r", custom_timer2.read());
	 
    while(1)       /// Cyclical Executive Loop
    {

        count++;               // counts the number of times through the loop
//      __enable_interrupts();
//      __clear_watchdog_timer();

/****************      ECEN 5803 add code as indicated   **********************/
    // uncomment this section after adding monitor code. 
    
        serial();            // Polls the serial port
        chk_UART_msg();     // checks for a serial port message received
        monitor();           // Sends serial port output messages depending
                         //     on commands received and display mode

        if ((SwTimerIsrCounter & 0x1FFF) > 0x0FFF)  
/****************      ECEN 5803 add code as indicated   **********************/
         // The bitwise AND operation masks (keeps) the 13 least significant bits (LSBs) 
				 // of SwTimerIsrCounter and sets all other bits to 0. This effectively checks 
				 // if the value of SwTimerIsrCounter is within the range of 0 to 0x1FFF.
				 // If the result of this operation is greater than 0x0FFF, it means that the 
				 // value of SwTimerIsrCounter has reached or exceeded 0x0FFF within that range.
        {
            flip();  // Toggle Green LED
        }

		
		//Write your code here for any additional tasks
		
		

    }   /// End while(1) loop

}
  